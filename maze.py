#!/usr/bin/python
# 
# Simple MazeWar Program
# Author: Franklin Reynolds
# Date: Feb 19, 2007
#
#    //     
#    //  Maze design  (0==air, -1==rock)
#    //
#    // 0,0                                            16,0
#    // 0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
#    //   .-------.   .-------------------.   .-.
#    //   | .---. |   | .---------. .---. |   | |
#    //   | |   | |   | |         | |   | |   | |
#    //   | |   | '---' '-----.   | |   | '---' '-----.
#    //   | |   | .---. .---. |   | |   | .---. .---. |
#    //   | |   | |   | |   | |   | |   | |   | |   | |
#    //   | '---' '---' '---' |   | '---' '---' '---' |
#    //   '-----------. .---. |   | .---------. .---. |
#    //               | |   | |   | |         | |   | |
#    //         .-----' '---' '---' |   .-----' '---' |
#    //         | .---------.".-----'   | .---------. |
#    //         | |         | |         | |         | |
#    //   .-----' |   .-----' '---------' |   .-----' |
#    //   | .---. |   | .---------. .---. |   | .-----'
#    //   | |   | |   | |         | |   | |   | |
#    //   | |   | '---' '---------' |   | '---' |
#    //   | |   | .---. .---. .---. |   | .---. |
#    //   | |   | |   | |   | |   | |   | |   | |  
#    //   | '---' '---' |   | |   | '---' '---' '-----.
#    //   '-----------. |   | |   | .---------. .---. |
#    //               | |   | |   | |         | |   | |
#    //         .-----' '---' '---' |         | '---' |
#    //         '-------------------'         '-------'
#    //0,16                                            16,16
#    //
#
#
#    int [][] maze = {
#	{ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, // col 0
#	{ -1, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0,-1,-1,-1}, //     1
#	{ -1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1}, //     2
#	{ -1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1}, //     3
#	{ -1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1, 0,-1, 0,-1}, //     4
#	{ -1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1}, //     5
#	{ -1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1}, //     6
#	{ -1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1}, //     7
#	{ -1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1}, //     8
#	{ -1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1}, //     9
#	{ -1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1}, //     0
#	{ -1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1}, //     1
#	{ -1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1, 0,-1,-1,-1}, //     2
#	{ -1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1}, //     3
#	{ -1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1, 0,-1}, //     4
#	{ -1,-1,-1, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0,-1}, //     5
#	{ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}};//     6

import sys
import getopt

class Maze:
    halls = [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], \
            [ -1, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0, 0,-1,-1,-1], \
            [ -1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1], \
            [ -1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1], \
            [ -1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1, 0,-1, 0,-1], \
            [ -1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1], \
            [ -1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1], \
            [ -1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1], \
            [ -1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1], \
            [ -1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1], \
            [ -1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1], \
            [ -1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1], \
            [ -1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1, 0,-1,-1,-1], \
            [ -1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1], \
            [ -1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1, 0,-1], \
            [ -1,-1,-1, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0, 0,-1], \
            [ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]

    UP = 1
    LEFT = 2
    DOWN = 3
    RIGHT = 4
    SHOOT = 5
    STATUS = 6

    ROCK = -1
    # there must be a ROCK perimeter
    # walls are ALWAYS at least one cell thick
    # NO hallway shall be longer than 8 cells!
    AIR = 0
    PLAYER = 1
    GREMLIN = 2
    DEAD_GREM = 3
    FOE = 4

    ACTIVE = 1
    DEAD = 0

    NumOfGrem = 10
    NumofPlayers = 7

    def display(self):
        # orient display so 0,0 is in bottom left corner
        for y in reversed(range(len(self.halls))):
            sys.stdout.write(" ")
            for x in range(len(self.halls[0])):
                if self.halls[x][y] == 0 :
                    sys.stdout.write("..")
                if self.halls[x][y] == -1 :
                    sys.stdout.write("  ")
                if self.halls[x][y] > 0 and self.halls[x][y] < 10 :
                    sys.stdout.write(" " + str(self.halls[x][y]))
                if self.halls[x][y] > 9 :
                    sys.stdout.write(str(self.halls[x][y]))
            sys.stdout.write("\n")

    def set_loc(self, thing, x, y):
        if halls[x][y] == 0:
            halls[x][y] = thing
            return True
        return False
    
    def set_direction(self, thing, direction):
        return True


def main(argv=None):
    if argv is None:
        argv = sys.argv
    m = Maze()
    print(m.halls)
    print("maze: just testing")
    m.display()
    print("gremlin = ", m.GREMLIN)

if __name__ == "__main__":
    main()
